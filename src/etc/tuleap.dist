# Apache configuration of the Tuleap Debian package

## SERVER WIDE PARAMETERS

# Enable SSL with VirtualHosts
NameVirtualHost *:443

# Default values
ServerName %sys_default_domain%
DocumentRoot "/usr/share/tuleap/src/www"
DirectoryIndex index.html index.htm index.php index.html.var

# Default permissions
<Directory />
	Options FollowSymLinks
	AllowOverride None
</Directory>

<Directory "/usr/share/tuleap/src/www">
	Options Includes FollowSymLinks MultiViews
	AllowOverride All
	AcceptPathInfo On
	Order allow,deny
	Allow from all
	SetEnvIfNoCase Request_URI /file/download\.php no-gzip dont-vary
</Directory>

# Don't allow access to API for anyone.
# Currently, the risk is low, so we only filter on UserAgent string (which can be easily forged)
# For better security, you can filter on the server IP address
SetEnvIf User-Agent ^Codendi let_me_in
<Directory "/usr/share/tuleap/src/www/api">
	# API scrips do not end with ".php"
	ForceType application/x-httpd-php
	Order Deny,Allow
	Deny from all
	Allow from env=let_me_in
</Directory>

# On the production server the local.inc file is in /etc/tuleap/conf/local.inc
# because it contains sensitive data
SetEnv CODENDI_LOCAL_INC ""

# Include php.conf file outside of any virtual host to make sure
# it is available everywhere. 
Include tuleap/php.conf

## VIRTUAL HOSTS

<VirtualHost *:80>
	ServerName %sys_default_domain%
	ServerAlias www.%sys_default_domain%
	ServerAlias lists.%sys_default_domain%

	Include tuleap/*.conf

	CustomLog ${APACHE_LOG_DIR}/tuleap_main_access.log common
	ErrorLog ${APACHE_LOG_DIR}/tuleap_main_error.log
</VirtualHost>

# Subversion virtual hosts alias
<VirtualHost *:80>
	ServerName %sys_default_domain%
	ServerAlias svn.*.%sys_default_domain%
	Include tuleap/svnroot.conf

	CustomLog ${APACHE_LOG_DIR}/tuleap_svn_access.log common
	ErrorLog ${APACHE_LOG_DIR}/tuleap_svn_error.log
</VirtualHost>

# Project web site virtual hosts alias
<VirtualHost *:80>
	ServerName %sys_default_domain%
	ServerAlias *.%sys_default_domain%
	VirtualDocumentRoot /home/groups/%1/htdocs
	# We won't allow cgi scripts to run on project web sites. (see installation guide)
	DirectoryIndex index.html index.php
	# PHP variables
	php_admin_value open_basedir "/home/groups/"
	php_admin_value include_path "."
	php_admin_flag safe_mode on
	php_admin_flag safe_mode_gid on
	<Directory /home/groups>
		Options Indexes FollowSymlinks
		AllowOverride All
		order allow,deny
		allow from all
	</Directory>
	LogFormat "%v %h %l %u %t \"%r\" %>s %b" vhost
	CustomLog ${APACHE_LOG_DIR}/tuleap_vhosts_access.log vhost
	ErrorLog ${APACHE_LOG_DIR}/tuleap_vhosts_error.log
</VirtualHost>

# SSL
<VirtualHost *:443>
	ServerName %sys_default_domain%
	ServerAlias www.%sys_default_domain%
	ServerAlias lists.%sys_default_domain%

	Include tuleap/*.conf

	CustomLog ${APACHE_LOG_DIR}/tuleap_main_access.log common
	ErrorLog ${APACHE_LOG_DIR}/tuleap_main_error.log

	SSLEngine on

	#   Server Certificate:
	# Point SSLCertificateFile at a PEM encoded certificate.  If
	# the certificate is encrypted, then you will be prompted for a
	# pass phrase.  Note that a kill -HUP will prompt again.  A new
	# certificate can be generated using the genkey(1) command.
	SSLCertificateFile /etc/ssl/certs/localhost.crt

	#   Server Private Key:
	#   If the key is not combined with the certificate, use this
	#   directive to point at the key file.  Keep in mind that if
	#   you've both a RSA and a DSA private key you can configure
	#   both in parallel (to also allow the use of DSA ciphers, etc.)
	SSLCertificateKeyFile /etc/ssl/private/localhost.key

	#   Server Certificate Chain:
	#   Point SSLCertificateChainFile at a file containing the
	#   concatenation of PEM encoded CA certificates which form the
	#   certificate chain for the server certificate. Alternatively
	#   the referenced file can be the same as SSLCertificateFile
	#   when the CA certificates are directly appended to the server
	#   certificate for convinience.
	#SSLCertificateChainFile /etc/apache2/ssl.crt/server-ca.crt

	#   Certificate Authority (CA):
	#   Set the CA certificate verification path where to find CA
	#   certificates for client authentication or alternatively one
	#   huge file containing all of them (file must be PEM encoded)
	#   Note: Inside SSLCACertificatePath you need hash symlinks
	#         to point to the certificate files. Use the provided
	#         Makefile to update the hash symlinks after changes.
	#SSLCACertificatePath /etc/ssl/certs/
	#SSLCACertificateFile /etc/apache2/ssl.crt/ca-bundle.crt

	#   Certificate Revocation Lists (CRL):
	#   Set the CA revocation path where to find CA CRLs for client
	#   authentication or alternatively one huge file containing all
	#   of them (file must be PEM encoded)
	#   Note: Inside SSLCARevocationPath you need hash symlinks
	#         to point to the certificate files. Use the provided
	#         Makefile to update the hash symlinks after changes.
	#SSLCARevocationPath /etc/apache2/ssl.crl/
	#SSLCARevocationFile /etc/apache2/ssl.crl/ca-bundle.crl

	#   Client Authentication (Type):
	#   Client certificate verification type and depth.  Types are
	#   none, optional, require and optional_no_ca.  Depth is a
	#   number which specifies how deeply to verify the certificate
	#   issuer chain before deciding the certificate is not valid.
	#SSLVerifyClient require
	#SSLVerifyDepth  10

	#   Access Control:
	#   With SSLRequire you can do per-directory access control based
	#   on arbitrary complex boolean expressions containing server
	#   variable checks and other lookup directives.  The syntax is a
	#   mixture between C and Perl.  See the mod_ssl documentation
	#   for more details.
	#<Location />
	#SSLRequire (    %{SSL_CIPHER} !~ m/^(EXP|NULL)/ \
	#            and %{SSL_CLIENT_S_DN_O} eq "Snake Oil, Ltd." \
	#            and %{SSL_CLIENT_S_DN_OU} in {"Staff", "CA", "Dev"} \
	#            and %{TIME_WDAY} >= 1 and %{TIME_WDAY} <= 5 \
	#            and %{TIME_HOUR} >= 8 and %{TIME_HOUR} <= 20       ) \
	#           or %{REMOTE_ADDR} =~ m/^192\.76\.162\.[0-9]+$/
	#</Location>

	#   SSL Engine Options:
	#   Set various options for the SSL engine.
	#   o FakeBasicAuth:
	#     Translate the client X.509 into a Basic Authorisation.  This means that
	#     the standard Auth/DBMAuth methods can be used for access control.  The
	#     user name is the `one line' version of the client's X.509 certificate.
	#     Note that no password is obtained from the user. Every entry in the user
	#     file needs this password: `xxj31ZMTZzkVA'.
	#   o ExportCertData:
	#     This exports two additional environment variables: SSL_CLIENT_CERT and
	#     SSL_SERVER_CERT. These contain the PEM-encoded certificates of the
	#     server (always existing) and the client (only existing when client
	#     authentication is used). This can be used to import the certificates
	#     into CGI scripts.
	#   o StdEnvVars:
	#     This exports the standard SSL/TLS related `SSL_*' environment variables.
	#     Per default this exportation is switched off for performance reasons,
	#     because the extraction step is an expensive operation and is usually
	#     useless for serving static content. So one usually enables the
	#     exportation for CGI and SSI requests only.
	#   o StrictRequire:
	#     This denies access when "SSLRequireSSL" or "SSLRequire" applied even
	#     under a "Satisfy any" situation, i.e. when it applies access is denied
	#     and no other module can change it.
	#   o OptRenegotiate:
	#     This enables optimized SSL connection renegotiation handling when SSL
	#     directives are used in per-directory context.
	#SSLOptions +FakeBasicAuth +ExportCertData +StrictRequire
	<FilesMatch "\.(cgi|shtml|phtml|php)$">
		SSLOptions +StdEnvVars
	</FilesMatch>
	<Directory /usr/lib/cgi-bin>
		SSLOptions +StdEnvVars
	</Directory>

	#   SSL Protocol Adjustments:
	#   The safe and default but still SSL/TLS standard compliant shutdown
	#   approach is that mod_ssl sends the close notify alert but doesn't wait for
	#   the close notify alert from client. When you need a different shutdown
	#   approach you can use one of the following variables:
	#   o ssl-unclean-shutdown:
	#     This forces an unclean shutdown when the connection is closed, i.e. no
	#     SSL close notify alert is send or allowed to received.  This violates
	#     the SSL/TLS standard but is needed for some brain-dead browsers. Use
	#     this when you receive I/O errors because of the standard approach where
	#     mod_ssl sends the close notify alert.
	#   o ssl-accurate-shutdown:
	#     This forces an accurate shutdown when the connection is closed, i.e. a
	#     SSL close notify alert is send and mod_ssl waits for the close notify
	#     alert of the client. This is 100% SSL/TLS standard compliant, but in
	#     practice often causes hanging connections with brain-dead browsers. Use
	#     this only for browsers where you know that their SSL implementation
	#     works correctly.
	#   Notice: Most problems of broken clients are also related to the HTTP
	#   keep-alive facility, so you usually additionally want to disable
	#   keep-alive for those clients, too. Use variable "nokeepalive" for this.
	#   Similarly, one has to force some clients to use HTTP/1.0 to workaround
	#   their broken HTTP/1.1 implementation. Use variables "downgrade-1.0" and
	#   "force-response-1.0" for this.
	BrowserMatch "MSIE [2-6]" \
		nokeepalive ssl-unclean-shutdown \
		downgrade-1.0 force-response-1.0
	# MSIE 7 and newer should be able to use keepalive
	BrowserMatch "MSIE [17-9]" ssl-unclean-shutdown
</VirtualHost>

